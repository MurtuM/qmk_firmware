#include QMK_KEYBOARD_H
#include <stdio.h>

#define LETTERS 0
#define GAMING 1
#define NUMBERS 2
#define F_ROW 3
#define NAV 4

#define NO_USB_STARTUP_CHECK

enum custom_keycodes {
    _MACRO_REC = SAFE_RANGE,
    _MACRO_PRINT,
    _FAST_STEP_UP,
    _FAST_STEP_DOWN,
    _TILDE_NO_SHIT,
    _ROOF_NO_SHIT
};

#define MACRO_MAX_SIZE 64
static uint16_t s_macro[MACRO_MAX_SIZE];
static int s_macro_cursor = 0;
static bool s_macro_rec = false;
static uint16_t s_last_pressed = 0;
static uint16_t s_repeating_key = 0;

/*
 * Base Layer: QWERTY
 *
 * ,-------------------------------------------.                              ,-------------------------------------------.
 * |  Tab   |   Q  |   W  |   E  |   R  |   T  |                              |   Y  |   U  |   I  |   O  |   P  |  Bksp  |
 * |--------+------+------+------+------+------|                              |------+------+------+------+------+--------|
 * |Ctrl/Esc|   A  |   S  |   D  |   F  |   G  |                              |   H  |   J  |   K  |   L  | ;  : |Ctrl/' "|
 * |--------+------+------+------+------+------+-------------.  ,-------------+------+------+------+------+------+--------|
 * | LShift |   Z  |   X  |   C  |   V  |   B  | [ {  |CapsLk|  |F-keys|  ] } |   N  |   M  | ,  < | . >  | /  ? | RShift |
 * `----------------------+------+------+------+------+------|  |------+------+------+------+------+----------------------'
 *                        |Adjust| LGUI | LAlt/| Space| Nav  |  | Sym  | Space| AltGr| RGUI | Menu |
 *                        |      |      | Enter|      |      |  |      |      |      |      |      |
 *                        `----------------------------------'  `----------------------------------'
 */

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {[LETTERS] = LAYOUT(
	KC_TAB, KC_Q, KC_W, KC_E, KC_R, KC_T,                                                   KC_Y, KC_U, KC_I, KC_O, KC_P, KC_LBRC,
	MO(NAV), KC_A, KC_S, KC_D, KC_F, KC_G,                                                  KC_H, KC_J, KC_K, KC_L, KC_SCLN, KC_QUOT,
	KC_LSFT, KC_Z, KC_X, KC_C, KC_V, KC_B, XXXXXXX, XXXXXXX,                    XXXXXXX, XXXXXXX, KC_N, KC_M, KC_COMM, KC_DOT, KC_SLSH, MO(NUMBERS),
	        KC_LGUI, KC_LALT, KC_LCTL, MO(NUMBERS), KC_LSFT,                    KC_BSPC, KC_SPC, KC_ENT, MO(F_ROW), DF(GAMING)),


                                                              [GAMING] = LAYOUT(
    KC_ESC,     KC_TAB,     KC_Q,       KC_W,       KC_E,       KC_R,                                                     _______, _______, _______, _______, _______, _______,
    _______,    KC_LSFT,    KC_A,       KC_S,       KC_D,       KC_F,                                                    _______, _______, _______, _______, _______, _______,
    _______,    KC_LCTL,    KC_Z,       KC_X,       KC_C,       KC_V,   _______, _______,                         _______, _______, _______, _______, _______, _______, _______, _______,
                                        _______, _______, KC_SPC, MO(NUMBERS), KC_SPC,         _______, _______, _______, _______, DF(LETTERS)
    ),

    /*
    * LSFT(KC_NUHS)
    ^ LSFT(KC_RBRC)
    ' KC_BSLS
    ~ RALT(KC_RBRC)

    1 2 3 4 5 6 7 8 9 0 +
    ! " # ¤ % & / ( ) = ?
    | < > $ @ ¤ { [ ] } \
    */
                                                              [NUMBERS] = LAYOUT(
	KC_GRV, KC_1, KC_2, KC_3, KC_4, KC_5,                                                                               KC_6, KC_7, KC_8, KC_9, KC_0, KC_MINS,
	KC_ESC, RSFT(KC_1), RSFT(KC_2), RSFT(KC_3), LSFT(KC_NUHS), RSFT(KC_5),                                                 LSFT(KC_6), LSFT(KC_7), LSFT(KC_8), LSFT(KC_9), LSFT(KC_0), LSFT(KC_MINS),
	_______, RALT(KC_NUBS), KC_NUBS, LSFT(KC_NUBS), RALT(KC_4), RALT(KC_2), XXXXXXX, XXXXXXX,      XXXXXXX, XXXXXXX, RSFT(KC_4), RALT(KC_7), RALT(KC_8), RALT(KC_9), RALT(KC_0), RALT(KC_MINS),
	                                        _______, _______, _______, _______, _______,    _______, _______, _______, DF(GAMING), XXXXXXX),


                                                              [NAV] = LAYOUT(
	_______, XXXXXXX, KC_TILD, KC_CIRC, _MACRO_REC, _MACRO_PRINT,                                           _FAST_STEP_UP, KC_HOME, KC_UP,   KC_END,  KC_PGUP, _TILDE_NO_SHIT  /*RALT(KC_RBRC)~*/,
	_______, XXXXXXX, KC_LCTL, KC_LSFT, XXXXXXX, XXXXXXX,                                                   _FAST_STEP_DOWN, KC_LEFT, KC_DOWN, KC_RGHT, KC_PGDN,  KC_BSLS/*'*/,
	_______, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX, XXXXXXX,         XXXXXXX, XXXXXXX, KC_F3, _______, _______, _______, _______, _ROOF_NO_SHIT /*LSFT(KC_RBRC)^*/,
                      _______, _______, _______, _______, _______,                  KC_DEL, _______, _______, XXXXXXX, XXXXXXX),


                                                              [F_ROW] = LAYOUT(
	LALT(KC_F4), KC_F1, KC_F2, KC_F3, KC_F4, KC_F5,                                           KC_F6, KC_F7, KC_F8, KC_F9, KC_F10, KC_F11,
	KC_CAPS, LGUI(KC_1), LGUI(KC_2), LGUI(KC_3), LGUI(KC_4), LGUI(KC_5),                      LGUI(KC_6), LGUI(KC_7), LGUI(KC_8), LGUI(KC_9), LGUI(KC_0), KC_F12,
	_______, RGB_TOG, RGB_MOD, RGB_HUI, RGB_SAI, RGB_VAI, XXXXXXX, XXXXXXX,             XXXXXXX, XXXXXXX, XXXXXXX, KC_MPLY, KC_MPRV, KC_MNXT, KC_PSCR, KC_PAUS,
                                    RGB_SPI, _______, _______, _______, _______,         _______, _______, _______, _______, _______)};


// #ifdef OLED_ENABLE
oled_rotation_t oled_init_user(oled_rotation_t rotation) { return OLED_ROTATION_180; }

bool oled_task_user(void) {
    if (is_keyboard_master()) {
        // QMK Logo and version information
        // clang-format off
        // static const char PROGMEM qmk_logo[] = {
        //     0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,0x90,0x91,0x92,0x93,0x94,
        //     0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,0xac,0xad,0xae,0xaf,0xb0,0xb1,0xb2,0xb3,0xb4,
        //     0xc0,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,0xd0,0xd1,0xd2,0xd3,0xd4,0};
        // // clang-format on

        // oled_write_P(qmk_logo, false);

        oled_clear();

        static char buf[6];
        if (s_macro_rec)
        {
            oled_write_P(PSTR("Recording: \n\n"), false);

            for (size_t i = 0; i < s_macro_cursor; i++)
            {
                sprintf(buf, "%u ", s_macro[i]);
                oled_write(buf, false);
            }
        }
        else
        {
            switch (get_highest_layer(layer_state|default_layer_state)) {
                case LETTERS:
                    oled_write_P(PSTR("Letters\n"), false);
                    break;
                case NUMBERS:
                    oled_write_P(PSTR("Numbers\n"), false);
                    break;
                case NAV:
                    oled_write_P(PSTR("Navigation\n"), false);
                    break;
                case F_ROW:
                    oled_write_P(PSTR("F-row\n"), false);
                    break;
                case GAMING:
                    oled_write_P(PSTR("Gaming\n"), false);
                    break;
                default:
                    oled_write_P(PSTR("Undefined\n"), false);
            }

            sprintf(buf, "%u", s_last_pressed);
            oled_write_P(PSTR("\nLast: "), false);
            oled_write(buf, false);
        }

        // Write host Keyboard LED Status to OLEDs
        led_t led_usb_state = host_keyboard_led_state();
        oled_write_P(led_usb_state.num_lock    ? PSTR("NUMLCK ") : PSTR("       "), false);
        oled_write_P(led_usb_state.caps_lock   ? PSTR("CAPLCK ") : PSTR("       "), false);
        oled_write_P(led_usb_state.scroll_lock ? PSTR("SCRLCK ") : PSTR("       "), false);
    } else {

        // 'murtum_logo', 128x64px
        static const char PROGMEM murtum_logo []  = {
            // 'murtum_logo (2)', 128x64px
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x80, 0xf0, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x80, 0x80, 0x80,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x7f, 0x70, 0xc0, 0x80,
            0x80, 0x00, 0x80, 0xc0, 0x70, 0xff, 0xff, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
            0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xfc, 0xf8, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x1f, 0xff, 0xff, 0xfc, 0xf0, 0xe0, 0x80, 0x00, 0x00, 0x80, 0x80, 0xe0, 0xfb, 0xff, 0xff,
            0xff, 0xfe, 0x3c, 0xfc, 0xfc, 0xc6, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x00, 0x01,
            0xff, 0xdf, 0xc0, 0xe0, 0x40, 0xe0, 0xf0, 0x80, 0x00, 0x60, 0x70, 0x7c, 0x7e, 0xfe, 0xff, 0xff,
            0xe3, 0x80, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf0, 0xfc, 0xff, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x80, 0xff, 0x7f, 0x1f, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x1f, 0xff, 0xff,
            0x7f, 0x73, 0x60, 0x61, 0x61, 0x3f, 0x1f, 0x0f, 0xcf, 0xfe, 0xf6, 0xf7, 0xe7, 0xc0, 0xe2, 0xff,
            0xff, 0xff, 0xe1, 0xe0, 0x70, 0x7f, 0xff, 0x7f, 0x63, 0x60, 0x60, 0x37, 0x0f, 0xc0, 0xf1, 0x1f,
            0x0f, 0x07, 0x07, 0x0f, 0x0f, 0x07, 0x07, 0x0f, 0x3f, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8,
            0xfe, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0x7c, 0x7f, 0x7f,
            0xff, 0xf8, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x07, 0x0f, 0x01, 0x01, 0x03, 0x07, 0xc0, 0x70,
            0x7f, 0x7f, 0xf9, 0xe0, 0xe0, 0x40, 0x40, 0x3f, 0x06, 0x80, 0xf0, 0xfc, 0x7f, 0x7f, 0x3f, 0x7e,
            0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xfc, 0xff, 0xff, 0x7f, 0x1f, 0x0f, 0x07,
            0x07, 0x0f, 0x1f, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x03, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0xc0, 0x60, 0x1f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x3f, 0x0f, 0x0f, 0x07, 0x0f, 0x1f,
            0x7f, 0xfe, 0xfc, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x81, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };

        oled_write_raw_P(murtum_logo, sizeof(murtum_logo));
    }
    return false;
}
// #endif

static void print_murtum_macro(void)
{
    s_macro_rec = false;
    for (int i = 0; i < s_macro_cursor; i++)
        tap_code16(s_macro[i]);
}

static void tap_with_macro_support(uint16_t keycode, bool tap)
{
    if (tap)
        tap_code16(keycode);

    if ((keycode < QK_MODS_MAX || keycode > SAFE_RANGE) && s_macro_rec && s_macro_cursor < MACRO_MAX_SIZE)
    {
        if (get_mods() & MOD_MASK_ALT)
            keycode = LALT(keycode);
        if (get_mods() & MOD_MASK_CTRL)
            keycode = LCTL(keycode);
        if (get_mods() & MOD_MASK_SHIFT)
            keycode = LSFT(keycode);
        if (get_mods() & MOD_MASK_GUI)
            keycode = LGUI(keycode);

        s_macro[s_macro_cursor++] = keycode;
    }
}

void matrix_scan_user(void)
{
    if (s_repeating_key != 0)
        tap_code16(s_repeating_key);
}

bool process_record_user(uint16_t keycode, keyrecord_t *record) {

    if (keycode == _FAST_STEP_UP)
    {
        s_repeating_key = record->event.pressed ? KC_UP : 0;
        return false;
    }
    else if (keycode == _FAST_STEP_DOWN)
    {
        s_repeating_key = record->event.pressed ? KC_DOWN : 0;
        return false;
    }

    if (!record->event.pressed)
    {
        s_last_pressed = 0;
        return true;
    }
    s_last_pressed = keycode;

    if (keycode == _MACRO_REC)
    {
        if (!s_macro_rec)
            s_macro_cursor = 0;
        s_macro_rec = !s_macro_rec;

        return false;
    }
    else if (keycode == _MACRO_PRINT)
    {
        print_murtum_macro();
        return false;
    }
    else
        tap_with_macro_support(keycode, false);

    // if (keycode == _FAST_STEP_UP)
    // {
    //     for (int i = 0; i < 5; i++)
    //         tap_with_macro_support(KC_UP, true);
    //     return false;
    // }
    // else if (keycode == _FAST_STEP_DOWN)
    // {
    //     for (int i = 0; i < 5; i++)
    //         tap_with_macro_support(KC_DOWN, true);
    //     return false;
    // }

    if (keycode == _TILDE_NO_SHIT)
    {
        tap_with_macro_support(RALT(KC_RBRC), true);
        tap_with_macro_support(KC_SPC, true);
        return false;
    }
    else if (keycode == _ROOF_NO_SHIT)
    {
        tap_with_macro_support(LSFT(KC_RBRC), true);
        tap_with_macro_support(KC_SPC, true);
        return false;
    }

    return true;
};

bool encoder_update_user(uint8_t index, bool clockwise)
{
    (void) index;
    uint8_t layer = get_highest_layer(layer_state);

    if (clockwise)
    {
        tap_code16(C(KC_Z));
    }
    else
    {
        if (layer == NAV)
            print_murtum_macro();
        else
            tap_code16(C(KC_Y));
    }

    return false;
}
